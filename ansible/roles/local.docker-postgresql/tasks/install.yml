- name: PostgreSQL | ensure docker is installed
  package:
    name: docker.io
  become: true

- name: PostgreSQL | ensure docker is running
  service:
    name: docker
    state: started

- name: PostgreSQL | ensure docker-py
  pip:
    name: docker-py
  become: True

- name: PostgreSQL | ensure that recovery.conf is not present
  file:
    path: /var/lib/postgresql/data/recovery.conf
    state: absent
  become: True
  
- name: PostgreSQL | start docker containers
  docker_container:
    name: "{{ postgresql_service_name }}"
    image: postgres:10
    network_mode: host
    restart_policy: on-failure
    restart_retries: 5
    volumes:
    - "{{ postgresql_data_directory }}:/var/lib/postgresql/data"
    - "{{ postgresql_conf_directory }}:/etc/postgresql"
    - "{{ postgresql_conf_directory }}/conf.d:/etc/postgresql/conf.d"
    - "{{ postgresql_data_directory }}:{{ postgresql_data_directory }}"
    env:
      PGDATA: "{{postgresql_data_directory}}"
  become: True

- name: PostgreSQL | Wait for Port
  wait_for:
    port: "{{postgresql_port}}"
    timeout: 60

- name: PostgreSQL | Update configuration - pt. 3 (recovery.conf)
  template:
    src: "recovery.conf-{{ postgresql_version }}.j2"
    dest: "{{postgresql_data_directory}}/recovery.conf"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
  become: True
  register: postgresql_configuration_pt3
  when: postgresql_is_secondary
  notify: restart postgresql container


#- name: PostgreSQL | install service
#- name: PostgreSQL | ensure docker container is started
